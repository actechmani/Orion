const Apis = {
    tenant: {
        root: 'tenant',
        list: 'tenant/list',
        listGrid: 'tenant/listAll',
    },
    entityMetaData: {
        root: 'entityMetaData',
        list: 'entityMetaData/list',
    },
    policy: {
        root: 'policy',
        list: 'policy/list',
    },
    user: {
        root: 'user',
        list: 'user/list',
        policyInfo: `/user/userPolicyInfo`,
    },
    role: {
        root: 'role',
        list: 'role/list',
    },
    userGroup: {
        root: 'usergroup',
        list: 'usergroup/list',
        bulkUserOps: 'usergroup/bulkUserOps',
        updateUserGroup: '/user/updateMembership',
    },
    bluePrint: {
        root: 'bluePrint',
        list: '/bluePrint/list',
    },
    tenantfoundationservices: {
        root: 'tenantfoundationservices',
        list: '/tenantfoundationservices/list',
    },
    cluster: {
        root: 'cluster',
        list: 'cluster/list',
        validate: 'cluster/validate',
        count: 'cluster/count',
        dashboard: 'dashboard',
        events: 'cluster/events',
        refresh: 'proxy/renderer/idp/renderer/api/syncCluster',
        recommend: 'clusterrecommendations/',
    },
    clusterSchedule: {
        root: 'nodegroupschedule',
        list: 'nodegroupschedule/list',
        testCronExpression: '/nodegroupschedule/testcron',
        nodeGroupActivity: '/activityInfo/search',
    },
    image: {
        root: 'image',
        list: 'docker',
    },
    appConfig: {
        root: 'appconfig',
        list: 'appconfig/list',
    },
    foundationService: {
        root: 'foundationService',
        list: 'foundationService/list',
    },
    auditTrails: {
        root: 'auditTrail',
        list: 'auditTrail/list',
    },
    backstage: {
        root: 'backstage',
        list: 'api/catalog/entities?filter=kind=component',
        details: 'api/catalog/entities/by-name/component/default/',
        saverepo: 'api/scaffolder/v2/tasks',
        rerun: 'api/proxy/harness/gateway/pipeline/api/pipeline/execute/rerun/',
        runcicd: 'api/proxy/harness/gateway/pipeline/api/pipeline/execute/',
        importRepo: 'api/catalog/locations',
    },
    environment: {
        root: 'environment',
        envschedule: 'envschedule',
        schedulelist: 'envschedule/list',
        eventlist: 'envschedulejoin/events',
        envactivity: '/envactivities/list',
        testCronEnvExpression: '/envschedule/testcron',
        joinschedule: 'envschedulejoin',
        env: 'environment/env',
        list: 'environment/listenv',
        runstartrds: 'environment/rds/start',
        runstoprds: 'environment/rds/stop',
        vm: 'environment/listvm/',
        runvm: 'environment/managevm/',
        createenvironment: 'environment/createenvironment',
        templatelist: 'environment/listtemplate',
        vpctaglist: 'environment/vpc/list',
        getharnessstatus: 'environment/getprogress',
        getpipeline: 'environment/getpipeline',
        getpipelines: 'environment/getpipelines',
        getpipelinesprogress: 'environment/getpipelinesprogress',
        getpipelineslist: 'environment/getpipelineslist',
        getpipelinestatus: 'environment/getpipelinestatus',
        triggerpipeline: 'environment/triggerpipeline',
        getpipelinedata: 'environment/getpipelinedata',
        getclusterurl: 'environment/readoutput',
        checkpodname: 'environment/checkpodexist',
        getSelectTemp: 'environment/getSingleTemplate',
        validsubnetlist: 'environment/vpc/validateSubnetCgnat',
        podclustervalidate: 'environment/cluster/info',
        newEnvironment: 'environment/newEnvironment',
        getLogs: 'environment/getlogs',
        listEnvironment: 'environment/listenvironment',
        getEnvListById: 'environment/envdetail/',
        syncEnvironment: 'environment/sync',
        cancelWorkflow: 'environment/cancelWorkflow',
        terminateWorkflow: 'environment/terminateWorkflow',
        workflowResult: 'environment/workflowResult',
    },
    template: {
        createtemplate: 'environment/template/createtemplate',
        listtemplate: 'environment/template/listtemplate',
        updatetemplate: 'environment/template/updatetemplate',
    },
    selfService: {
        actionform: 'actionform',
        actionforms: 'actionform/list',
        actioninstance: 'actioninstance',
        actioninstances: 'actioninstance/list',
    },
    dashboard: {
        getincident: 'api/proxy/opsgenie/api/v1/incidents?limit=5&sort=createdAt&order=desc',
    },
};

export  {Apis};
